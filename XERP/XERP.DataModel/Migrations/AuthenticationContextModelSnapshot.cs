// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XERP.DataModel;

namespace XERP.DataModel.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    partial class AuthenticationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Certificates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("XERP.DataModel.HR.CostCenters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeCertifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateCustomName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IssuedDate")
                        .IsRequired();

                    b.Property<string>("IssuedInstitution")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ValidityExpiration")
                        .IsRequired();

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCertifications");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeDependents", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 48)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("EmployeeDependents");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeEducationalHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("InclusiveDateFrom");

                    b.Property<DateTime>("InclusiveDateTo");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SchoolAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("EmployeeEducationalHistory");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeePreviousER", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .IsRequired();

                    b.Property<decimal>("Rate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("YearEnd");

                    b.Property<decimal>("_25GrossTaxableCompensationIncome");

                    b.Property<decimal>("_27PremiumPaid");

                    b.Property<decimal>("_31TotalTaxWithheld");

                    b.Property<decimal>("_3713thMonthPayAndOtherBenefits");

                    b.Property<decimal>("_38DeMinimisBenefits");

                    b.Property<decimal>("_39ContributionsAndUnionDues");

                    b.Property<decimal>("_40SalariesAndCompensation");

                    b.Property<decimal>("_51Taxable13thMonthPayAndOtherBenefits");

                    b.HasKey("Id");

                    b.ToTable("EmployeePreviousER");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeRanks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("EmployeeRanks");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeType")
                        .IsRequired();

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CostCenterId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeRankId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeTypeId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SiteId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStates");
                });

            modelBuilder.Entity("XERP.DataModel.HR.EmployeeTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CompanyId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("VersionNo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Employees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("CivilStatus")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<Guid?>("EmployeePreviousERId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<int>("NationalityId");

                    b.Property<string>("Status");

                    b.Property<string>("Suffix");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePreviousERId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Nationalities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Positions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CompanyId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("VersionNo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("XERP.DataModel.HR.PreviousEmployers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById");

                    b.Property<Guid?>("EmployeePreviousERId");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .IsRequired();

                    b.Property<string>("RegisteredName")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<string>("TIN");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePreviousERId");

                    b.ToTable("PreviousEmployers");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Regions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<DateTime>("EffectivityDate");

                    b.Property<float>("MWERate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("XERP.DataModel.HR.Sites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CompanyId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.Currencies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid?>("CurrencyDetailsId");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyDetailsId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.CurrencyDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CompanyBankAccountId");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("MyProperty");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.DayTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("DayTypes");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.EmployeePayrollItems", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CompanyId");

                    b.Property<string>("ConstantValue");

                    b.Property<string>("CurrencyId");

                    b.Property<string>("CurrencyRate");

                    b.Property<DateTime>("DateEffective");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("PayrollItemId");

                    b.Property<string>("Remarks");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("EmployeePayrollItems");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.HourTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("active");

                    b.HasKey("ID");

                    b.ToTable("HourTypes");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.Loans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amortization");

                    b.Property<decimal>("AmountPaid");

                    b.Property<DateTime>("Applicationdate");

                    b.Property<decimal>("Balance");

                    b.Property<string>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateClosed");

                    b.Property<DateTime>("DateEffective");

                    b.Property<string>("Description");

                    b.Property<int>("EffectiveMonth");

                    b.Property<string>("EffectivePayrollScheduleId");

                    b.Property<int>("EffectiveYear");

                    b.Property<string>("EmployeeId");

                    b.Property<DateTime>("GrantedDate");

                    b.Property<float>("InterestRate");

                    b.Property<bool>("IsHold");

                    b.Property<bool>("IsOnetimeDeduction");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("LastModifiedById");

                    b.Property<decimal>("LoanAmount");

                    b.Property<DateTime>("MonthlyInterestAmount");

                    b.Property<DateTime>("MonthlyPrincipalAmount");

                    b.Property<int>("NoOfPayments");

                    b.Property<string>("Number");

                    b.Property<decimal>("OtherPayments");

                    b.Property<string>("PayrollItemId");

                    b.Property<string>("PayrollScheduleId");

                    b.Property<decimal>("PenaltyAmount");

                    b.Property<float>("PenalyRate");

                    b.Property<decimal>("PreviousPayments");

                    b.Property<decimal>("Principal");

                    b.Property<string>("RefNo");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.ParameterRates", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DayTypeId")
                        .IsRequired();

                    b.Property<string>("HourTypeId")
                        .IsRequired();

                    b.Property<decimal>("Rate");

                    b.HasKey("ID");

                    b.ToTable("ParameterRates");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.Parameters", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Comment");

                    b.Property<string>("CompanyId");

                    b.Property<float>("DaysInYear");

                    b.Property<float>("HoursInDay");

                    b.Property<bool>("IsStandard");

                    b.Property<string>("Name");

                    b.Property<string>("ParameterRateId");

                    b.Property<string>("PaymentTypeId");

                    b.HasKey("ID");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.PayrollItemTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PayrollItemTypes");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.PayrollItems", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("CompanyId");

                    b.Property<string>("DayTypeId");

                    b.Property<string>("Description");

                    b.Property<string>("GroupCode");

                    b.Property<string>("HourTypeId");

                    b.Property<bool>("IncludeIn13thMonthPay");

                    b.Property<bool>("IncludeInHDMF");

                    b.Property<bool>("IncludeInPHIC");

                    b.Property<bool>("IncludeInSSS");

                    b.Property<bool>("IncludeInWTAX");

                    b.Property<bool>("IsLoan");

                    b.Property<bool>("IsStandard");

                    b.Property<string>("Name");

                    b.Property<string>("PayrollItemTypeId");

                    b.Property<string>("SysCode");

                    b.HasKey("ID");

                    b.ToTable("PayrollItems");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.PayrollPeriods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("AnnualizationOrdering");

                    b.Property<string>("Code");

                    b.Property<bool>("Is13thMonthPay");

                    b.Property<bool>("IsAnnualization");

                    b.Property<bool>("IsFinalPay");

                    b.Property<bool>("IsRegular");

                    b.Property<bool>("IsRetirement");

                    b.Property<bool>("IsStandard");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PayrollPeriods");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.ClientCompanies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IndustryType");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Status");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("ClientCompanies");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.Clients", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IndustryType");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Status");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.Industries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CompanyId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("VersionNo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.Modules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ServiceId")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.UserModules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessHash");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("UserModules");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "e592941d-a03e-4d04-a896-ab2d4715abae",
                            ConcurrencyStamp = "6a84f64a-352a-49d3-9a89-f2aa8bbb4fc3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "21845b0f-ddc8-4079-94a4-236737468c30",
                            ConcurrencyStamp = "c3d752fe-0870-416d-babb-90e3955c4e89",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "ddb62183-b479-44c8-897f-6ec32a0b7888",
                            ConcurrencyStamp = "c4edcfd2-f350-4792-b4e0-4c6f6163a696",
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.ApplicationUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ActivationCode");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("EmployeesId");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<string>("LastModifiedById");

                    b.Property<DateTime>("PasswordDate");

                    b.Property<bool>("PasswordNeverExpires");

                    b.Property<string>("Remarks");

                    b.Property<string>("SecurityHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status");

                    b.Property<bool>("UserCantChangePassword");

                    b.Property<bool>("UserChangePasswordNextLogon");

                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VersionNo");

                    b.HasIndex("EmployeesId");

                    b.HasDiscriminator().HasValue("ApplicationUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XERP.DataModel.HR.Employees", b =>
                {
                    b.HasOne("XERP.DataModel.HR.EmployeePreviousER")
                        .WithMany("Employee")
                        .HasForeignKey("EmployeePreviousERId");
                });

            modelBuilder.Entity("XERP.DataModel.HR.PreviousEmployers", b =>
                {
                    b.HasOne("XERP.DataModel.HR.EmployeePreviousER")
                        .WithMany("PreviousEmployer")
                        .HasForeignKey("EmployeePreviousERId");
                });

            modelBuilder.Entity("XERP.DataModel.PAYROLL.Currencies", b =>
                {
                    b.HasOne("XERP.DataModel.PAYROLL.CurrencyDetails")
                        .WithMany("Currencies")
                        .HasForeignKey("CurrencyDetailsId");
                });

            modelBuilder.Entity("XERP.DataModel.SYSTEM.ApplicationUsers", b =>
                {
                    b.HasOne("XERP.DataModel.HR.Employees")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("EmployeesId");
                });
#pragma warning restore 612, 618
        }
    }
}
